defmodule PodJs do
  @behaviour Phoenix.Template.Engine

  def compile(path, _name) do
    path
    |> read!()
    |> EEx.compile_string(engine: Phoenix.HTML.Engine, file: path, line: 1)
  end

  def read!(path) do
    path
    |> File.read!()
    |> precompile(path)
  end

  def precompile(source, path) do
    [&page_script_path/1, &every_script_path/1]
    |> Stream.map(& &1.(path))
    |> Stream.filter(&File.exists?/1)
    |> Stream.map(&to_script_name/1)
    |> Enum.map_join("\n", &script_tag/1)
    |> case do
      "" ->
        source
      included_scripts ->
        """
        #{source}
        <!-- Generated by pod_js -->
        #{included_scripts}
        """
    end
  end

  defp to_script_name(script_path) do
    p
    |> Path.split()
    |> Enum.reverse()
    |> Enum.take(2)
    |> Enum.reverse()
    |> Enum.join("-")
  end

  defp page_script_path(path) do
    String.replace_trailing(".html.eex", ".js")
  end

  defp every_script_path(path) do
    path
    |> Path.dirname()
    |> Path.join("every.js")
  end

  defp script_tag(src) do
    """
    <script defer type="text/javascript" src="<%= Routes.static_path(@conn, "/js/#{src}") %>"></script>
    """
  end
end
